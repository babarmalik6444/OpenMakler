<?php

namespace App\Filament\Resources\RealEstateResource\Pages;

use App\Filament\Resources\RealEstateResource;
use Filament\Pages\Actions;
use Filament\Resources\Pages\EditRecord;
use App\Services\immobilienscout24\Auth\AuthService;
use Illuminate\Contracts\Container\Container;
use Illuminate\Routing\Route;
use Illuminate\Support\Facades\Request;
use App\Models\Openimmo\RealEstate;
use App\Models\ScouteApi;

class EditRealEstate extends EditRecord
{
    protected static string $resource = RealEstateResource::class;
    protected $scoutAPIService;
    protected $scoutAPIVerifier;


    function __construct(){
        $this->scoutAPIService = new AuthService;
        if (Request::has('oauth_verifier'))
        {
            $PropertRecord = RealEstate::find(request()->segments()[2]);

            if($this->scoutAPIService->getAccessToken(Request::get('oauth_token'), Request::get('oauth_verifier'),$PropertRecord->id)) {
                if ($PropertRecord->scout_api_id == '') {
                    $res = $this->scoutAPIService->addProperty($PropertRecord);
                    $scout_api_id = $res['message']['id'];
                    RealEstate::where('id', $PropertRecord->id)->update(['scout_api_id' => $scout_api_id]);
                    $this->notify('success', "Data Updated Succesfully.");
                } else {
                    $res = $this->scoutAPIService->UpdateProperty($PropertRecord);
                    $this->notify('success', "Data Updated Succesfully.");
                }
            }
        }
    }

    function __invoke(Container $container, Route $route)
    {
        if (Request::has('oauth_verifier')) {
            return redirect('app/real-estates/'.request()->segments()[2].'/edit/');
        }
        return parent::__invoke($container, $route); // TODO: Change the autogenerated stub
    }

    protected function getActions(): array
    {
        if($this->record->scout_api_id) {
            return [
                Actions\DeleteAction::make(),
                Actions\Action::make("openimmo")
                    ->action("openImmoDownload"),
                Actions\Action::make("Update in Scout24")
                    ->action("ExportAPI"),
                Actions\Action::make("Delete in Scout24")
                    ->action("DeleteAPI"),
                Actions\Action::make("archive")
                    ->label(fn(): string => $this->record->published ? "Archivieren" : "Reaktivieren")
                    ->action("archiveRealestate")
            ];
        }
        return [
            Actions\DeleteAction::make(),
            Actions\Action::make("openimmo")
                ->action("openImmoDownload"),
            Actions\Action::make("Create in Scout24")
                ->action("ExportAPI"),
            Actions\Action::make("archive")
                ->label(fn(): string => $this->record->published ? "Archivieren" : "Reaktivieren")
                ->action("archiveRealestate")
        ];
    }


    public function openImmoDownload()
    {
        $xml = $this->record->getOpenImmoXml();

        return response()->streamDownload(function () use ($xml) {
            echo $xml;
        }, $this->record->id . "_openimmo.xml");
    }

    public function ExportAPI()
    {
        $ScoutData = ScouteApi::latest()->first();
        if($ScoutData != null && $ScoutData->verifier !='')
        {
              if($this->record->scout_api_id =='')
            {
                 $res = $this->scoutAPIService->addProperty($this->record);
                 if($res){
                     $scout_api_id = $res['message']['id'];
                     RealEstate::where('id', $this->record->id)->update(['scout_api_id'=>$scout_api_id]);
                     $this->notify('success', "Data added Successfully.");
                 } else {
                     $this->notify('error', "Something went wrong.");
                 }

            } else{
                    if($this->scoutAPIService->UpdateProperty($this->record)){
                        $this->notify('success', "Data Updated Successfully.");
                    }
                    else{
                        $this->notify('error', "Something went wrong.");
                    }
            }
        }
        else{
            $url = $this->scoutAPIService->getRequestToken($this->record->id);
            return response()->redirectGuest($url);
        }


    }

    public function DeleteAPI()
    {
        if($this->record->scout_api_id){
            $res = $this->scoutAPIService->DeleteProperty($this->record);
            $this->notify('success', "Data deleted Successfully from Scout24 API.");
        } else{
            $this->notify('info', "This property does not exist in Scout API.");
        }

    }


    public function archiveRealestate()
    {
        if($this->record->published) {
            $this->record->archiveIt();
        }
        else {
            $this->record->reactivateIt();
        }

        $this->notify('success', "Wurde erfolgreich " . ($this->record->published ? "archiviert" : "reaktiviert") . ".");
    }
}
